/***
@Author: Martin Molema
@Date: may 1st, 2022
@Version: 1
@Status: Review

Lexer for parsing expressions including boolean, arithmatic and specific expressions for the crisisgame triggers/objects

ANTLR convention says Uppercase first letter means lexer rule.

**/
lexer grammar BooleanMathLex;

// --------------------------------------------------------------------------------------------------------------
// statement tokens
// --------------------------------------------------------------------------------------------------------------
COLON: ':';

// --------------------------------------------------------------------------------------------------------------
//boolean expressions
// --------------------------------------------------------------------------------------------------------------
TRUE       : T R U E ;
FALSE      : F A L S E ;

// --------------------------------------------------------------------------------------------------------------
// String functions
// --------------------------------------------------------------------------------------------------------------

CONCAT: C O N C A T;

// --------------------------------------------------------------------------------------------------------------
// Mathematics
// --------------------------------------------------------------------------------------------------------------

PLUS: '+';
MINUS: '-';
TIMES: '*';
DIV: '/';
POW: '^';
SQRT: S Q R T ;
CUBE: C U B E;
SUM: S U M ;
AVERAGE: A V E R A G E;
MIN: M I N;
MAX: M A X;
OPERATORMINMIN: '--';
OPERATORPLUSPLUS: '++';

// --------------------------------------------------------------------------------------------------------------
// Lists
// --------------------------------------------------------------------------------------------------------------

LISTSEPERATOR : ',';
BEGINLIST  : '[';
ENDLIST    : ']';
WS         : [ \r\t\u000C\n]+ -> skip;

// --------------------------------------------------------------------------------------------------------------
// Binary operations
// --------------------------------------------------------------------------------------------------------------
AND        : A N D ;
OR         : O R ;
XOR        : X O R  ;
NOT        : N O T;

// --------------------------------------------------------------------------------------------------------------
// Comparison operations
// --------------------------------------------------------------------------------------------------------------
GT         : '>' ;
GE         : '>=' ;
LT         : '<' ;
LE         : '<=' ;
EQ         : '==' ;
NEQ        : '!=' ;
APPROXIMATION: '~';

// --------------------------------------------------------------------------------------------------------------
// SQL-type comparisons
// --------------------------------------------------------------------------------------------------------------
IN         : I N;
LIKE       : L I K E;
ISNULL     : I S WS* N U L L ;

// --------------------------------------------------------------------------------------------------------------
// Grouping
// --------------------------------------------------------------------------------------------------------------
LPAREN     : '(' ;
RPAREN     : ')' ;

// --------------------------------------------------------------------------------------------------------------
// Arithmatic stuff: definitions of numbers
// --------------------------------------------------------------------------------------------------------------
DECIMAL
   : NUMERIC (EXPONENT SIGN? UNSIGNED_INTEGER)?
   ;

fragment NUMERIC
   : ('0' .. '9') + ('.' ('0' .. '9') +)?
   ;

fragment UNSIGNED_INTEGER
   : ('0' .. '9')+
   ;


fragment EXPONENT
   : 'E' |
 'e'
   ;

fragment SIGN
   : ('+' | '-')
   ;

// --------------------------------------------------------------------------------------------------------------
// Finally: define what an identifier may look like and what a string is (either double or single quoted)
// --------------------------------------------------------------------------------------------------------------

IDENTIFIERCHARS:[a-zA-Z_] [a-zA-Z_0-9]* ;

// --------------------------------------------------------------------------------------------------------------
STRING     : ('"' | '\'') (.*?) ('"' | '\'') ;

// --------------------------------------------------------------------------------------------------------------
// FRAGMENTS
// --------------------------------------------------------------------------------------------------------------
fragment A: [A|a] ;
fragment B: [B|b] ;
fragment C: [C|c] ;
fragment D: [D|d] ;
fragment E: [E|e] ;
fragment F: [F|f] ;
fragment G: [G|g] ;
fragment H: [H|h] ;
fragment I: [I|i] ;
fragment J: [J|j] ;
fragment K: [K|k] ;
fragment L: [L|l] ;
fragment M: [M|m] ;
fragment N: [N|n] ;
fragment O: [O|o] ;
fragment P: [P|p] ;
fragment Q: [Q|q] ;
fragment R: [R|r] ;
fragment S: [S|s] ;
fragment T: [T|t] ;
fragment U: [U|u] ;
fragment V: [V|v] ;
fragment W: [W|w] ;
fragment X: [X|x] ;
fragment Y: [Y|y] ;
fragment Z: [Z|z] ;

